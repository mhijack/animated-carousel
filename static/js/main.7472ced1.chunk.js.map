{"version":3,"sources":["components/Card/Card.js","components/CardContainer/CardContainer.js","components/Instruction/Instruction.js","App.js","serviceWorker.js","index.js"],"names":["Card","shouldComponentUpdate","nextProp","nextState","flipped","_this","props","style","_this$props","this","index","emoji","backgroundColor","opacity","transform","transitionDuration","concat","generateRandomRotateDegree","react_default","a","createElement","className","Object","objectSpread","Component","Math","floor","random","cards","id","CardContainer","currentCard","state","componentDidMount","setState","initEventHandler","window","addEventListener","handleKeyDown","e","keyCode","previousItem","nextItem","flipCard","flip","card","toConsumableArray","slice","length","_this2","map","components_Card_Card","assign","key","Instruction","App","components_CardContainer_CardContainer","components_Instruction_Instruction","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7472ced1.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './Card.css';\n\nclass Card extends Component {\n    /*  Only update card if 'flipped' prop changed\n    */\n    shouldComponentUpdate = (nextProp, nextState) => {\n        return nextProp.flipped !== this.props.flipped;\n    };\n\n    render() {\n        const { index, emoji, flipped, backgroundColor } = this.props;\n\n        let style;\n\n        style = flipped\n            ? {\n                  opacity: 0,\n                  transform: `translate3d(-100px, 0, 0) rotate(45deg)`,\n                  transitionDuration: `0.7s`\n              }\n            : {\n                  opacity: 1,\n                  transform: `translate3d(0px, 0, 0) rotate(${generateRandomRotateDegree()}deg)`,\n                  transitionDuration: `0.3s`\n              };\n        style.backgroundColor = backgroundColor;\n\n        return (\n            <div\n                className={`item${index} cardItem`}\n                style={{\n                    ...style\n                }}\n            >\n                <h1>{emoji}</h1>\n            </div>\n        );\n    }\n}\n\nconst generateRandomRotateDegree = () => {\n    return Math.floor(Math.random() * 10);\n};\n\nexport default Card;\n","import React, { Component } from 'react';\n\nimport Card from '../Card/Card';\n\nimport './CardContainer.css';\n\nconst cards = [\n    { id: 0, emoji: `🐶`, backgroundColor: '#ECCE8E', flipped: false },\n    { id: 1, emoji: `🐱`, backgroundColor: '#A9F0D1', flipped: false },\n    { id: 2, emoji: `🦒`, backgroundColor: '#D3C1C3', flipped: false },\n    { id: 3, emoji: `🦁️`, backgroundColor: '#B5BFA1', flipped: false },\n    { id: 4, emoji: `🐯`, backgroundColor: '#F9C80E', flipped: false },\n    { id: 5, emoji: `🐒`, backgroundColor: '#A5D8FF', flipped: false },\n    { id: 6, emoji: `🐭`, backgroundColor: '#333333', flipped: false }\n];\n\nclass CardContainer extends Component {\n    currentCard = 7;\n\n    state = {\n        cards: []\n    };\n\n    /*  Initiate app\n    */\n    componentDidMount = () => {\n        this.setState({\n            cards\n        });\n        this.initEventHandler();\n    };\n\n    /*  Attaches keydown event handler\n    */\n    initEventHandler = () => {\n        window.addEventListener('keydown', this.handleKeyDown);\n    };\n\n    /*  Up and Left arrow trigger previous card;\n        Down and Right arrow trigger next card;\n    */\n    handleKeyDown = e => {\n        const key = e.keyCode;\n\n        switch (key) {\n            case 37:\n            case 38:\n                return this.previousItem();\n            case 39:\n            case 40:\n                return this.nextItem();\n            default:\n                return;\n        }\n    };\n\n    /*  @params: array of cards, index of being flipped\n        @returns: a new array with the specified card flipped\n    */\n    flipCard = (cards, index, flip) => {\n        let card = cards[index];\n        card = {\n            ...card,\n            flipped: flip\n        };\n        return [...cards.slice(0, index), card, ...cards.slice(index + 1)];\n    };\n\n    previousItem = () => {\n        const { cards } = this.state;\n        if (this.currentCard > 0) {\n            this.currentCard--;\n            this.setState({\n                cards: this.flipCard(cards, this.currentCard, true)\n            });\n        } else {\n            return;\n        }\n    };\n\n    nextItem = () => {\n        const { cards } = this.state;\n\n        if (this.currentCard < cards.length) {\n            this.setState({\n                cards: this.flipCard(cards, this.currentCard, false)\n            });\n            this.currentCard++;\n        } else {\n            return;\n        }\n    };\n\n    render() {\n        const cards = this.state.cards.map(card => {\n            return <Card key={card.id} {...card} currentCard={this.currentCard} />;\n        });\n\n        return <div className=\"cardContainer\">{cards}</div>;\n    }\n}\n\nexport default CardContainer;\n","import React from 'react';\n\nimport './Instruction.css';\n\nconst Instruction = props => (\n    <div className=\"instruction\">\n        <p>Use <span className=\"instruction__button\">left &larr; / up &uarr;</span> arrow to go to previous card, and <span className=\"instruction__button\">right &rarr; / bottom &darr;</span> arrow for next card.</p>\n    </div>\n)\n\nexport default Instruction;","import React from 'react';\n\nimport CardContainer from './components/CardContainer/CardContainer';\nimport Instruction from './components/Instruction/Instruction';\n\nimport './App.css';\n\nconst App = props => {\n    return (\n        <div className=\"App\">\n            <CardContainer />\n            <Instruction />\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}